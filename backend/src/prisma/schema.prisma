generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           BigInt   @id @default(autoincrement())
    uuid         String   @unique @default(uuid()) @db.Uuid
    email        String   @unique @db.VarChar(255)
    username     String   @unique @db.VarChar(100)
    passwordHash String   @map("password_hash") @db.VarChar(255)
    fullName     String?  @map("full_name") @db.VarChar(255)
    avatarUrl    String?  @map("avatar_url") @db.VarChar(500)
    createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relations
    ownedBoards   Board[]
    boardMembers  BoardMember[]
    createdTasks  Task[]         @relation("TaskCreator")
    assignedTasks Task[]         @relation("TaskAssignee")
    comments      Comment[]
    attachments   Attachment[]
    refreshTokens RefreshToken[]

    @@map("users")
}

model Board {
    id              BigInt   @id @default(autoincrement())
    uuid            String   @unique @default(uuid()) @db.Uuid
    title           String   @db.VarChar(255)
    description     String?  @db.Text
    ownerId         BigInt   @map("owner_id")
    backgroundColor String   @default("#ffffff") @map("background_color") @db.VarChar(7)
    isArchived      Boolean  @default(false) @map("is_archived")
    createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relations
    owner   User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    members BoardMember[]
    columns Column[]
    tasks   Task[]
    labels  Label[]

    @@map("boards")
}

enum BoardRole {
    owner
    admin
    member
    viewer
}

model BoardMember {
    id       BigInt    @id @default(autoincrement())
    boardId  BigInt    @map("board_id")
    userId   BigInt    @map("user_id")
    role     BoardRole @default(member)
    joinedAt DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)

    // Relations
    board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([boardId, userId])
    @@index([boardId])
    @@index([userId])
    @@map("board_members")
}

model Column {
    id         BigInt   @id @default(autoincrement())
    uuid       String   @unique @default(uuid()) @db.Uuid
    boardId    BigInt   @map("board_id")
    title      String   @db.VarChar(255)
    position   Int
    color      String?  @db.VarChar(7)
    isArchived Boolean  @default(false) @map("is_archived")
    createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relations
    board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    tasks Task[]

    @@unique([boardId, position])
    @@index([boardId])
    @@index([boardId, position])
    @@map("columns")
}

enum TaskPriority {
    low
    medium
    high
    urgent
}

model Task {
    id          BigInt       @id @default(autoincrement())
    uuid        String       @unique @default(uuid()) @db.Uuid
    boardId     BigInt       @map("board_id")
    columnId    BigInt       @map("column_id")
    title       String       @db.VarChar(500)
    description String?      @db.Text
    position    Decimal      @db.Decimal(10, 5)
    priority    TaskPriority @default(medium)
    dueDate     DateTime?    @map("due_date") @db.Timestamptz(6)
    createdBy   BigInt?      @map("created_by")
    assignedTo  BigInt?      @map("assigned_to")
    isArchived  Boolean      @default(false) @map("is_archived")
    createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relations
    board       Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
    column      Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
    creator     User?        @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: SetNull)
    assignee    User?        @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
    taskLabels  TaskLabel[]
    comments    Comment[]
    attachments Attachment[]

    @@index([boardId])
    @@index([columnId])
    @@index([boardId, columnId])
    @@index([columnId, position])
    @@index([assignedTo])
    @@map("tasks")
}

model Label {
    id        BigInt   @id @default(autoincrement())
    boardId   BigInt   @map("board_id")
    name      String   @db.VarChar(100)
    color     String   @db.VarChar(7)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    // Relations
    board      Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
    taskLabels TaskLabel[]

    @@unique([boardId, name])
    @@map("labels")
}

model TaskLabel {
    id        BigInt   @id @default(autoincrement())
    taskId    BigInt   @map("task_id")
    labelId   BigInt   @map("label_id")
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    // Relations
    task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
    label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

    @@unique([taskId, labelId])
    @@index([taskId])
    @@index([labelId])
    @@map("task_labels")
}

model Comment {
    id        BigInt   @id @default(autoincrement())
    taskId    BigInt   @map("task_id")
    userId    BigInt   @map("user_id")
    content   String   @db.Text
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relations
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([taskId])
    @@map("comments")
}

model Attachment {
    id        BigInt   @id @default(autoincrement())
    taskId    BigInt   @map("task_id")
    userId    BigInt?  @map("user_id")
    filename  String   @db.VarChar(255)
    fileUrl   String   @map("file_url") @db.VarChar(500)
    fileSize  BigInt?  @map("file_size")
    mimeType  String?  @map("mime_type") @db.VarChar(100)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

    // Relations
    task Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([taskId])
    @@map("attachments")
}

model RefreshToken {
    id        BigInt    @id @default(autoincrement())
    userId    BigInt    @map("user_id")
    token     String    @unique @db.VarChar(500)
    expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
    isRevoked Boolean   @default(false) @map("is_revoked")
    ipAddress String?   @map("ip_address") @db.VarChar(45)
    userAgent String?   @map("user_agent") @db.VarChar(500)
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
    revokedAt DateTime? @map("revoked_at") @db.Timestamptz(6)

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([token])
    @@index([expiresAt])
    @@map("refresh_tokens")
}
